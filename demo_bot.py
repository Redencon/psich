'''
–ù–∞—Å—Ç–µ–Ω—å–∫–∞
v. 0.0.17
'''

import os
import telebot
import json
import threading
import schedule
from telebot import types
import time
from gmail_send_message import send_code
import yaml
import random
import gpt_users
from achievements import add_achievement
from achievements import streak_achievement
from achievements import average_consistency_achievement
from achievements import timestamp
from achievements import achievement_message
from requests.exceptions import ConnectionError

with open('secret2.json', 'r', encoding='utf-8') as f:
    secret = json.load(f)

TOKEN = secret['TOKEN']
ADMIN = secret['ADMIN']
ARBITRARY_THRESHOLD = secret['ARBITRARY_THRESHOLD']
CHAT = secret['CHAT']
S = True

bot = telebot.TeleBot(TOKEN)

TIMES = ('08:15', '12:10', '15:20', '20:00')

chat_users = gpt_users.UserManager()

class Blacklist:
    def __init__(self) -> None:
        if os.path.exists('blacklist2.json'):
            with open('blacklist2.json') as file:
                self.dab = json.load(file)
        else:
            self.clear()
    
    def dump(self):
        with open('blacklist2.json', 'w') as file:
            json.dump(self.dab, file)
        return
    
    def add(self, user):
        self.dab.append(user)
        self.dump()

    def clear(self):
        self.dab = []
        self.dump()

class GeneralData:
    def __init__(self):
        with open('general.json') as file:
            self.data = json.load(file)
        return
    
    def dump(self):
        with open('general.json', 'w') as file:
            json.dump(self.data, file)
        return

    def new_day(self, key):
        self.data[key] = {'total': 0, 'sum': 0}
        adm_mess = bot.send_message(ADMIN, f'{timestamp()}\n–°—Ç–∞—Ç—Å–∏—Ç–∏–∫–∞ –ø–æ –æ–ø—Ä–æ—Å—É:\n0 –æ—Ç–≤–µ—Ç–æ–≤\n–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: NaN')
        self.data[key]['admin'] = adm_mess.id
        self.data[key]['others'] = {}
        self.dump()
        return

    def add_response(self, key, answer):
        self.data[key]['total'] += 1
        self.data[key]['sum'] += answer
        self.update_admin(key)
        self.dump()
        return
    
    def update_admin(self, key):
        hearts = ['‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','‚ù§Ô∏è‚Äçü©π']
        text = f'{key}\n–°—Ç–∞—Ç—Å–∏—Ç–∏–∫–∞ –ø–æ –æ–ø—Ä–æ—Å—É:\n{self.data[key]["total"]} –æ—Ç–≤–µ—Ç–æ–≤\n–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {hearts[round(self.data[key]["sum"] / self.data[key]["total"])]}'
        bot.edit_message_text(text, ADMIN, self.data[key]['admin'])
        for user in self.data[key]['others']:
            try:
                bot.edit_message_text(
                    f'–°–µ–≥–æ–¥–Ω—è —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞: {hearts[round(self.data[key]["sum"] / self.data[key]["total"])]}',
                    user,
                    self.data[key]['others'][user]
                )
            except telebot.apihelper.ApiTelegramException:
                print('It failed. Again :<')
        return
    
    def today(self, user_id):
        hearts = ['‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','‚ù§Ô∏è‚Äçü©π']
        key = timestamp()
        if self.data[key]['total'] < ARBITRARY_THRESHOLD:
            bot.send_message(user_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ.')
            return
        mess = bot.send_message(
            user_id,
            f'–°–µ–≥–æ–¥–Ω—è —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞: {hearts[round(self.data[key]["sum"] / self.data[key]["total"])]}'
        )
        self.data[key]['others'][user_id] = mess.id
        self.dump()
        return
        


class Pending_users():
    def __init__(self):
        with open('pending2.json') as file:
            self.dab = set(json.load(file))
        return
    
    def dump(self):
        with open('pending2.json', 'w') as file:
            json.dump(list(self.dab), file)
        return

    def add_pending(self, user_id):
        self.dab.add(user_id)
        self.dump()
    
    def check_pending(self, user_id):
        return user_id in self.dab
    
    def retreat_pending(self, user_id):
        self.dab.discard(user_id)
        self.dump()
        return


gens = GeneralData()
pend = Pending_users()
blkl = Blacklist()

colorcoding = [
    'üü•',
    'üüß',
    'üü®',
    'üü©',
    'üü¶',
    'üü™',
    'üü´',
    '‚¨ú'
]

def get_help():
    with open('help.json', encoding='utf-8') as file:
        help_db = json.load(file)
    return help_db

def days_in_month(month, year):
    if month == 2:
        if year % 4 == 0:
            return 29
        return 28
    if month in (1, 3, 5, 7, 8, 10, 12):
        return 31
    return 30

def convivnient_slicer(li):
    ret = [[]]
    for elem in li:
        if len(ret[-1]) == 3:
            ret.append([])
        ret[-1].append(elem)
    return ret

def is_late(ref: str) -> bool:
    now = time.localtime()
    ref_hrs = int(ref[:2])
    ref_mns = int(ref[3:])
    if now.tm_hour < ref_hrs:
        return False
    if now.tm_hour == ref_hrs:
        if now.tm_min <= ref_mns:
            return False
    return True

def dab_upd(filename, user_id, argument = None, **kwargs):
    '''Open the specified dab file and change it'''
    with open(filename) as file:
        dab = {int(key): val for key, val in json.load(file).items()}
    if user_id not in dab.keys() and kwargs:
        dab[user_id] = {}
    if argument is not None:
        dab[user_id] = argument
    else:
        for key in kwargs:
            dab[user_id][key] = kwargs[key]
    with open(filename, 'w') as file:
        json.dump(dab, file)
    return

def new_response(user_id, key, answer):
    with open('responses2/'+str(user_id)+'.json') as file:
        user_db = json.load(file)
    if key in user_db['responses'].keys():
        return False
    user_db['responses'][key] = answer
    with open('responses2/'+str(user_id)+'.json', 'w') as file:
        json.dump(user_db, file)
    return True

def dem_response(user_id, key, answer):
    with open('responses2/'+str(user_id)+'.json') as file:
        user_db = json.load(file)
    user_db['demog'][key] = answer
    with open('responses2/'+str(user_id)+'.json', 'w') as file:
        json.dump(user_db, file)
    return

def poll(user_id):
    hearts = ['‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','‚ù§Ô∏è‚Äçü©π']
    text = f'''{timestamp()}
–í—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞!
–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?
‚ù§Ô∏è - –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!
üß° - –û—Ç–ª–∏—á–Ω–æ!
üíõ - –•–æ—Ä–æ—à–æ!
üíö - –ù–æ—Ä–º–∞–ª—å–Ω–æ.
üíô - –ù–µ –æ—á–µ–Ω—å.
üíú - –ú–Ω–µ —Ç—è–∂–µ–ª–æ.
‚ù§Ô∏è‚Äçü©π - –£ –º–µ–Ω—è –±–æ–ª—å—à–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.'''
    markup = types.InlineKeyboardMarkup([[types.InlineKeyboardButton(hearts[i], callback_data='DS_'+str(i)) for i in range(7)]])
    bot.send_message(user_id, text, reply_markup=markup)

def send_poll(time):
    with open('status2.json') as file:
        users = json.load(file)
        users = {int(user_id):value for user_id, value in users.items()}
    last_today = time == TIMES[-1]
    if time == TIMES[0]:
        gens.new_day(timestamp())
        blkl.clear()
        blkl.add(timestamp())
    for user_id in users:
        if users[user_id] is not None:
            if users[user_id] == time and user_id not in blkl.dab:
                poll(user_id)
                blkl.add(user_id)
            if last_today and users[user_id] != time:
                with open('responses2/'+str(user_id)+'.json', 'r', encoding='utf-8') as f:
                    user_data = json.load(f)
                if timestamp() not in user_data['responses'].keys():
                    bot.send_message(user_id, '–Ø –∑–∞–º–µ—Ç–∏–ª–∞, —á—Ç–æ —Ç—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª(–∞) –æ–ø—Ä–æ—Å. –ü—Ä–æ–π–¥–∏ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')
    return

def wanna_get(message):
    bot.send_message(
            message.chat.id,
            '–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏?',
            reply_markup=types.InlineKeyboardMarkup([[
                types.InlineKeyboardButton('–î–∞', callback_data='ST_y'),
                types.InlineKeyboardButton('–ù–µ—Ç', callback_data='ST_n')
            ]])
        )
    return


@bot.message_handler(commands=['setchat'], func=lambda message: message.from_user.id == ADMIN)
def setchat(message: types.Message):
    CHAT = message.chat.id
    secret['CHAT'] = CHAT
    with open('secret.json', 'w', encoding='utf-8') as f:
        json.dump(secret, f, ensure_ascii=False, indent=4)
    bot.send_message(CHAT, '–ò—Å–ø–æ–ª—å–∑—É—é —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ —á–∞—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.')
    return

@bot.message_handler(commands=['update'], func=lambda message: message.from_user.id == ADMIN)
def update(message: types.Message):
    import sys
    import subprocess
    subprocess.Popen('start.bat', creationflags=subprocess.CREATE_NEW_CONSOLE)
    global S
    S = False
    sys.exit()


@bot.message_handler(commands=['start'])
def start(message):
    with open('status2.json') as file:
        users = json.load(file)
    if str(message.from_user.id) not in users.keys():
        bot.send_message(message.chat.id, '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É. –ê–¥—Ä–µ—Å –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å:')
        with open('responses2/' + str(message.from_user.id) + '.json', 'w') as file:
            json.dump({'demog': {}, 'responses': {}, 'code': None}, file)
        pend.add_pending(message.from_user.id)
    else:
        bot.reply_to(message, get_help()['help'])
    return

@bot.message_handler(['help'])
def help(message):
    help_db = get_help()
    argv = message.text.split()
    if len(argv) == 1:
        cmd = 'help'
    else:
        cmd = argv[1]
    if cmd not in help_db.keys():
        bot.reply_to(message, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.')
        return
    bot.reply_to(message, help_db[cmd])
    return
    

@bot.callback_query_handler(lambda call: call.data[:3] == 'ST_')
def start_response(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, '–°–ø–∞—Å–∏–±–æ.')
    bot.edit_message_text('–°–ø–∞—Å–∏–±–æ.', call.message.chat.id, call.message.id)
    with open('responses2/'+str(call.from_user.id)+'.json') as file:
        user_db = json.load(file)
    if call.data[-1] == 'n':
        if 'lgbt' in user_db['demog'].keys():
            dab_upd('status2.json', call.from_user.id, None)
        return
    if 'lgbt' in user_db['demog'].keys():
        with open('status2.json') as file:
            statuses = json.load(file)
        if statuses[str(call.from_user.id)] is None:
            time_present(call.message)
        return
    with open('pool.json') as file:
        questions = json.load(file)
    options = questions[0][2]
    bot.edit_message_text(
        '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n---\n'+questions[0][1],
        call.message.chat.id,
        call.message.id,
        reply_markup=types.InlineKeyboardMarkup([[types.InlineKeyboardButton(text, callback_data='DG_0'+str(i)) for i, text in enumerate(options)]])
    )
    return

@bot.callback_query_handler(lambda call: call.data[:3] == 'DS_')
def parse_survey(call: types.CallbackQuery):
    hearts = ['‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','‚ù§Ô∏è‚Äçü©π']
    answer = int(call.data[-1])
    text = call.message.text.split('\n')
    if text[0] != timestamp():
        bot.answer_callback_query(call.id, '–û–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª.')
        bot.edit_message_reply_markup(call.message.chat.id, call.message.id)
        return
    bot.answer_callback_query(call.id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ {hearts[answer]}')
    if new_response(call.from_user.id, text[0], answer):
        gens.add_response(text[0], answer)
    bot.edit_message_text('\n'.join(text) + f'\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {hearts[answer]}', call.message.chat.id, call.message.id, reply_markup=None)
    with open('responses.yaml', 'r', encoding='utf-8') as f:
        responses = yaml.safe_load(f)
    bot.send_message(
        call.message.chat.id,
        random.choice(responses[answer])
    )
    for i in (3, 7, 14, 30, 61, 150):
        a = streak_achievement(call.from_user.id, i, 'responses2/')
        if a is not None:
            if a:
                bot.send_message(call.message.chat.id, achievement_message('streak_'+str(i)))
            else:
                break
    for i in (15, 30):
        a = average_consistency_achievement(call.from_user.id, i)
        if a:
            bot.send_message(call.message.chat.id, achievement_message('consistency_'+str(i)))
    return

@bot.message_handler(commands=['unsub', 'sub'])
def unsub(message):
    wanna_get(message)
    return

@bot.callback_query_handler(lambda call: call.data[:3] == 'US_')
def unsub_check(call):
    if call.data[-1] == 'y':
        bot.answer_callback_query(call.id, '–ù—É –∏ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ.')
        dab_upd('status2.json', call.from_user.id, TIMES[1])
        bot.edit_message_text('–î–∞ –±—É–¥–µ—Ç —Ç–∞–∫.', call.message.chat.id, call.message.id)
    else:
        dab_upd('status2.json', call.from_user.id, None)
        bot.answer_callback_query(call.id, '–î–∞ –±—É–¥–µ—Ç —Ç–∞–∫.')
        bot.edit_message_text('–î–∞ –±—É–¥–µ—Ç —Ç–∞–∫.', call.message.chat.id, call.message.id)
    return

@bot.callback_query_handler(lambda call: call.data[:3] == 'DG_')
def demogr(call: types.CallbackQuery):
    bot.answer_callback_query(call.id)
    with open('pool2.json') as file:
        questions = json.load(file)
    cur = int(call.data[3])
    ans = int(call.data[4:])
    dem_response(call.from_user.id, questions[cur][0], questions[cur][2][ans])
    cur += 1
    if cur >= len(questions):
        bot.edit_message_text('–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ', call.message.chat.id, call.message.id)
        time_present(call.message)
        # dab_upd('status2.json', call.from_user.id, TIMES[1])
        bot.send_message(ADMIN, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.full_name}')
        if time.localtime()[3] > 12 or (time.localtime()[3] == 12 and time.localtime()[4] > 10):
            poll(call.from_user.id)
        return
    else:
        bot.edit_message_text(
            '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n---\n'+questions[cur][1],
            call.message.chat.id,
            call.message.id,
            reply_markup=types.InlineKeyboardMarkup(convivnient_slicer([types.InlineKeyboardButton(text, callback_data='DG_'+str(cur)+str(i)) for i, text in enumerate(questions[cur][2])]), row_width=5)
        )
        return

def calendar(user_id, month, year):
    with open('responses2/'+str(user_id)+'.json') as file:
        data = json.load(file)
    stamp = time.mktime((year, month, 1, 0, 0, 0, 0, 0, -1))
    time_struct = time.localtime(stamp)
    grey = (time_struct.tm_wday - 1 + 1) % 7 
    month = [str(year)+'/'+str(month)+'/'+str(i) for i in range(1, days_in_month(month, year)+1)]
    stat = [data['responses'][i] if i in data['responses'].keys() else 7 for i in month]
    text = [['‚ö´'] * grey]
    for s in stat:
        if len(text[-1]) == 7:
            text.append([])
        text[-1].append(colorcoding[s])
    text[-1] += ['‚ö´']*(7-len(text[-1]))
    text = '\n'.join([''.join(a) for a in text])
    return text


@bot.message_handler(commands=['stats'])
def stats(message: types.Message):
    curyear = time.localtime()[0]
    curmonth = time.localtime()[1]
    argv = message.text.split()[1:]
    if len(argv) > 0:
        if argv[0].isdigit():
            curmonth = int(argv[0])
            if curmonth > time.localtime()[1]:
                curyear -= 1
    user = message.from_user.id
    if add_achievement(message.from_user.id, 'stats', 'responses2/'):
        bot.send_message(message.chat.id, achievement_message('stats'))
    bot.send_message(
        message.chat.id,
        '–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Å–ø–µ—Ö –∑–∞ –º–µ—Å—è—Ü '+ str(curmonth) + '/' + str(curyear) +':\n'+calendar(user, curmonth, curyear),
        reply_markup=types.InlineKeyboardMarkup([[
            types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='SS_-'),
            types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='SS_+')
        ]])
    )
    return

@bot.callback_query_handler(lambda call: call.data[:3] == 'SS_')
def switch_calendar(call: types.CallbackQuery):
    data = call.data[-1]
    month, year = map(int, call.message.text.split('\n')[0].split()[-1][:-1].split('/'))
    if data == '+':
        month += 1
        if month == 13:
            year += 1
            month = 1
    else:
        month -= 1
        if month == 0:
            year -= 1
            month = 12
    bot.edit_message_text(
        '–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Å–ø–µ—Ö –∑–∞ –º–µ—Å—è—Ü '+ str(month) + '/' + str(year) +':\n'+calendar(call.from_user.id, month, year),
        call.message.chat.id,
        call.message.id,
        reply_markup=call.message.reply_markup
    )
    bot.answer_callback_query(call.id, '–î—Ä—É–≥–æ–π –º–µ—Å—è—Ü...')



@bot.message_handler(commands=['delete'])
def delete(message):
    bot.send_message(message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n–î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û', reply_markup=types.InlineKeyboardMarkup([[
        types.InlineKeyboardButton('–î–∞', callback_data='CL_y'),
        types.InlineKeyboardButton('–ù–µ—Ç', callback_data='CL_n')
    ]]))
    return

@bot.message_handler(commands=['today'])
def today(message):
    if add_achievement(message.from_user.id, 'today', 'responses2/'):
        bot.send_message(message.chat.id, achievement_message('today'))
    gens.today(message.from_user.id)
    return

@bot.callback_query_handler(lambda call: call.data[:3] == 'CL_')
def wipe(call: types.CallbackQuery):
    bot.answer_callback_query(call.id, '–û–∫.')
    if call.data[-1] == 'n':
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.delete_message(call.message.chat.id, call.message.id-1)
        return
    os.remove('responses2/'+str(call.from_user.id)+'.json')
    dab_upd('status2.json', call.from_user.id, None)
    chat_users.delete_user(call.from_user.id)
    bot.delete_message(call.message.chat.id, call.message.id)
    return

@bot.message_handler(func=lambda message: pend.check_pending(message.from_user.id) and message.text[0] != '/')
def email(message: types.Message):
    response = message.text
    with open('responses2/'+str(message.from_user.id)+'.json') as file:
        user_db = json.load(file)
    if response.isdigit():
        if user_db['code'] is not None:
            if int(response) == user_db['code']:
                bot.send_message(message.chat.id, '–£—Å–ø–µ—Ö!')
                pend.retreat_pending(message.from_user.id)
                dab_upd('status2.json', message.from_user.id, None)
                wanna_get(message)
                return
            else:
                bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
                return
        return
    else:
        code = send_code(response, None)
        if code is None:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑: –Ω–∞–ø–∏—à–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É')
            return
        if code == -1:
            bot.send_message(message.chat.id, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–æ–º–µ–Ω–∞ @phystech.edu. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑...')
            return
        print(code)
        user_db['code'] = code
        with open('responses2/'+str(message.from_user.id)+'.json', 'w') as file:
            json.dump(user_db, file)
        bot.send_message(message.chat.id, '–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥.')
        return

@bot.message_handler(commands=['time'])
def time_present(message):
    markup = [[]]
    linewidth = len(TIMES) // 2 if len(TIMES) // 2 < 4 else 4
    for i, elem in enumerate(TIMES):
        if len(markup[-1]) == linewidth:
            markup.append([])
        markup[-1].append(types.InlineKeyboardButton(elem, callback_data='TM_'+str(i)))
    markup = types.InlineKeyboardMarkup(markup)
    bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å:',
        reply_markup=markup
    )
    return

@bot.callback_query_handler(lambda call: call.data[:3] == 'TM_')
def time_choose(call: types.CallbackQuery):
    user_id = call.from_user.id
    choice = int(call.data[3:])
    bot.answer_callback_query(call.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è {TIMES[choice]}')
    dab_upd('status2.json', call.from_user.id, TIMES[choice])
    if is_late(TIMES[choice]):
        with open('responses2/'+str(user_id)+'.json') as file:
            data = json.load(file)
        if timestamp() not in data['responses'].keys():
            poll(user_id)
    bot.edit_message_text(
        f'–í—ã –≤—ã–±—Ä–∞–ª–∏: *{TIMES[choice]}*',
        call.message.chat.id,
        call.message.id,
        parse_mode='Markdown'
    )
    return

@bot.message_handler(commands=['achievements'])
def achievements(message: types.Message):
    with open('achievements.json', 'r', encoding='utf-8') as f:
        gen_data = json.load(f)
    with open('responses2/'+str(message.from_user.id)+'.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    if 'achievements' not in data.keys():
        data['achievements'] = []
        with open('responses2/'+str(message.from_user.id)+'.json', 'w', encoding='utf-8') as f:
            json.dump(data, f)
    bot.send_message(
        message.chat.id,
        'üèÜ–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—èüèÖ:\n'+'\n\n'.join(['‚ú®'+gen_data[name]['name']+':\n'+gen_data[name]['description'] for name in data['achievements']])
    )

@bot.message_handler(commands = ['thanks'], func=lambda message: message.chat.id==CHAT and message.reply_to_message is not None)
def thanks(message: types.Message):
    pseudonym = message.reply_to_message.text.split('\n')[0][2:]
    if add_achievement(
        chat_users.get_user_by_pseudonym(pseudonym).id,
        'good_conversation',
        'responses2/'
    ):
        bot.send_message(chat_users.get_user_by_pseudonym(pseudonym).id, achievement_message('good_conversation'))


@bot.message_handler(commands = ['grant'], func = lambda message: message.chat.id == ADMIN)
def grant(message: types.Message):
    text = message.text.split()[1:]
    with open('achievements.json', 'r', encoding='utf-8') as f:
        gen_data = json.load(f)
    if len(text) < 2:
        return
    if not text[0].isdigit():
        return
    if text[1] not in gen_data.keys():
        return
    user = int(text[0])
    if add_achievement(user, text[1], 'responses2/'):
        bot.send_message(user, achievement_message(text[1]))
        bot.send_message(ADMIN, '–î–æ–±–∞–≤–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.')


@bot.message_handler(['checkuser'], func = lambda message: message.from_user.id == ADMIN)
def checkuser(message):
    entities = message.entities
    buffer = ''
    for entity in entities:
        buffer += entity.type
        buffer += ' ' + str(entity.user.id) if entity.user is not None else 'None'
        buffer += '\n'
    bot.reply_to(message, buffer)


@bot.message_handler(['run'], func = lambda message: message.from_user.id == ADMIN)
def run(message):
    forced_polls()
    bot.reply_to(message, '–û—Ç–ø—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–æ—Å—ã.')
    return

def safe_send_message(chat_id, message):
    try:
        return bot.send_message(chat_id, message)
    except ConnectionError:
        time.sleep(3)
        return safe_send_message(chat_id, message)

@bot.message_handler(content_types=['text'], func= lambda message: message.from_user.id == message.chat.id and message.text[0] != '/')
def anon_message(message: types.Message):
    text = message.text
    hearts = ['‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','‚ù§Ô∏è‚Äçü©π']
    user = chat_users.get_user_by_id(message.from_user.id)
    if user is None:
        user = chat_users.new_user(message.from_user.id, message.from_user.first_name)
    with open('responses2/'+str(message.from_user.id)+'.json') as file:
        data = json.load(file)
    user.last_personal_message = message.id
    if timestamp() in data['responses'].keys():
        status = hearts[data['responses'][timestamp()]]
    else:
        status = '‚ùì'
    try:
        safe_send_message(
            CHAT,
            status + ' ' + user.pseudonym + '\n' + text
        )
    except telebot.apihelper.ApiTelegramException:
        print('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', CHAT)
    return


@bot.message_handler(content_types=['text'], func=lambda message: message.chat.id == CHAT and message.reply_to_message is not None)
def reply_to_anon_message(message: types.Message):
    if message.reply_to_message.from_user.id != bot.get_me().id:
        return
    reply = message.reply_to_message.text
    if reply[0] not in ('‚ù§Ô∏è','üß°','üíõ','üíö','üíô','üíú','‚ù§Ô∏è‚Äçü©π', '‚ùì'):
        return
    pseudonym = reply.split('\n')[0][2:]
    user = chat_users.get_user_by_pseudonym(pseudonym)
    if user is None:
        bot.send_message(CHAT, '–≠—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        return
    text = message.text.format(name = user.name)
    safe_send_message(user.id, text)
    return


@bot.message_handler(content_types=['new_chat_members'], func=lambda message: message.chat.id == CHAT)
def new_operator(message: types.Message):
    for user in message.new_chat_members:
        if add_achievement(user.id, 'operator', 'responses2/'):
            bot.send_message(user.id, achievement_message('operator'))
    bot.send_message(CHAT, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ù–∞—Å—Ç–µ–Ω—å–∫–∏! –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–∏—à—É—Ç –±–æ—Ç—É. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å. –ù–∞–≤–µ—Ä—Ö—É –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –µ–≥–æ –º–æ–∂–Ω–æ –æ–ø–æ–∑–Ω–∞—Ç—å. –£–¥–∞—á–∏!')


@bot.my_chat_member_handler()
def banned(update: types.ChatMemberUpdated):
    user = update.from_user.id
    if update.new_chat_member.status == 'kicked':
        chat_users.delete_user(user)
        os.remove('responses2/'+str(user)+'.json')
        dab_upd('status2.json', user, None)


def forced_polls():
    with open('status2.json') as file:
        users = json.load(file)
        users = {int(user_id):value for user_id, value in users.items()}
    for user_id in users:
        with open('responses2/'+str(user_id)+'.json') as file:
            data = json.load(file)
        if users[user_id] is not None and user_id not in blkl.dab:
            if timestamp() not in data['responses'].keys():
                if is_late(users[user_id]):
                    poll(user_id)
                    blkl.add(user_id)
    return



def set_commands(scope=types.BotCommandScopeDefault()):
    bot.delete_my_commands(scope=scope)
    bot.set_my_commands([
        types.BotCommand('start', '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º'),
        types.BotCommand('help', '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å'),
        types.BotCommand('today', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è'),
        types.BotCommand('time', '–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–æ—Å–∞'),
        types.BotCommand('sub', '–í–∫–ª/–û—Ç–∫–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã'),
        types.BotCommand('stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø—Ä–æ—Å—É –∑–∞ –º–µ—Å—è—Ü'),
        types.BotCommand('achievements', '–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'),
        types.BotCommand('delete', '–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    ], scope=scope)
    return



if __name__ == '__main__':
    with open('status2.json') as file:
        users = json.load(file)
        users = {int(user_id):value for user_id, value in users.items()}
    for user in users:
        try:
            set_commands(types.BotCommandScopeChat(user))
        except telebot.apihelper.ApiTelegramException:
            print('There\'s np chat with user', user)
    for elem in TIMES:
        schedule.every().day.at(elem).do(send_poll, elem)
    threading.Thread(target=bot.infinity_polling, name='bot_infinity_polling', daemon=True).start()
    if timestamp() not in blkl.dab:
        blkl.clear()
        blkl.add(timestamp())
    forced_polls()
    set_commands()
    print('–ù–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É')
    while S:
        schedule.run_pending()
        time.sleep(1)